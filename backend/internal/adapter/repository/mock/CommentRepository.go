// Code generated by mockery v2.12.2. DO NOT EDIT.

package mocks

import (
	domain "game-server/internal/core/domain"

	mock "github.com/stretchr/testify/mock"

	ports "game-server/internal/core/ports/repository"

	testing "testing"
)

// CommentRepository is an autogenerated mock type for the CommentRepository type
type CommentRepository struct {
	mock.Mock
}

// Add provides a mock function with given fields: _a0
func (_m *CommentRepository) Add(_a0 domain.Comment) error {
	ret := _m.Called(_a0)

	var r0 error
	if rf, ok := ret.Get(0).(func(domain.Comment) error); ok {
		r0 = rf(_a0)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Delete provides a mock function with given fields: comment_id
func (_m *CommentRepository) Delete(comment_id string) error {
	ret := _m.Called(comment_id)

	var r0 error
	if rf, ok := ret.Get(0).(func(string) error); ok {
		r0 = rf(comment_id)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Find provides a mock function with given fields: filter
func (_m *CommentRepository) Find(filter ports.CommentFilter) ([]*domain.Comment, error) {
	ret := _m.Called(filter)

	var r0 []*domain.Comment
	if rf, ok := ret.Get(0).(func(ports.CommentFilter) []*domain.Comment); ok {
		r0 = rf(filter)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*domain.Comment)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(ports.CommentFilter) error); ok {
		r1 = rf(filter)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Get provides a mock function with given fields: comment_id
func (_m *CommentRepository) Get(comment_id string) (domain.Comment, error) {
	ret := _m.Called(comment_id)

	var r0 domain.Comment
	if rf, ok := ret.Get(0).(func(string) domain.Comment); ok {
		r0 = rf(comment_id)
	} else {
		r0 = ret.Get(0).(domain.Comment)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(comment_id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// NewCommentRepository creates a new instance of CommentRepository. It also registers the testing.TB interface on the mock and a cleanup function to assert the mocks expectations.
func NewCommentRepository(t testing.TB) *CommentRepository {
	mock := &CommentRepository{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
