// Code generated by mockery v2.12.2. DO NOT EDIT.

package mocks

import (
	domain "game-server/internal/core/domain"

	mock "github.com/stretchr/testify/mock"

	testing "testing"
)

// ArticleRepository is an autogenerated mock type for the ArticleRepository type
type ArticleRepository struct {
	mock.Mock
}

// Add provides a mock function with given fields: _a0
func (_m *ArticleRepository) Add(_a0 domain.Article) (string, error) {
	ret := _m.Called(_a0)

	var r0 string
	if rf, ok := ret.Get(0).(func(domain.Article) string); ok {
		r0 = rf(_a0)
	} else {
		r0 = ret.Get(0).(string)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(domain.Article) error); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Delete provides a mock function with given fields: article_id
func (_m *ArticleRepository) Delete(article_id string) error {
	ret := _m.Called(article_id)

	var r0 error
	if rf, ok := ret.Get(0).(func(string) error); ok {
		r0 = rf(article_id)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Get provides a mock function with given fields: article_id
func (_m *ArticleRepository) Get(article_id string) (domain.Article, error) {
	ret := _m.Called(article_id)

	var r0 domain.Article
	if rf, ok := ret.Get(0).(func(string) domain.Article); ok {
		r0 = rf(article_id)
	} else {
		r0 = ret.Get(0).(domain.Article)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(article_id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetChangeRequests provides a mock function with given fields: article_id
func (_m *ArticleRepository) GetChangeRequests(article_id string) ([]*domain.ChangeRequest, error) {
	ret := _m.Called(article_id)

	var r0 []*domain.ChangeRequest
	if rf, ok := ret.Get(0).(func(string) []*domain.ChangeRequest); ok {
		r0 = rf(article_id)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*domain.ChangeRequest)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(article_id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetComments provides a mock function with given fields: article_id
func (_m *ArticleRepository) GetComments(article_id string) ([]*domain.Comment, error) {
	ret := _m.Called(article_id)

	var r0 []*domain.Comment
	if rf, ok := ret.Get(0).(func(string) []*domain.Comment); ok {
		r0 = rf(article_id)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*domain.Comment)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(article_id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetItineraries provides a mock function with given fields: article_id
func (_m *ArticleRepository) GetItineraries(article_id string) ([]*domain.Itinerary, error) {
	ret := _m.Called(article_id)

	var r0 []*domain.Itinerary
	if rf, ok := ret.Get(0).(func(string) []*domain.Itinerary); ok {
		r0 = rf(article_id)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*domain.Itinerary)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(article_id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetPins provides a mock function with given fields: article_id
func (_m *ArticleRepository) GetPins(article_id string) ([]*domain.Pin, error) {
	ret := _m.Called(article_id)

	var r0 []*domain.Pin
	if rf, ok := ret.Get(0).(func(string) []*domain.Pin); ok {
		r0 = rf(article_id)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*domain.Pin)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(article_id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Update provides a mock function with given fields: _a0
func (_m *ArticleRepository) Update(_a0 domain.Article) error {
	ret := _m.Called(_a0)

	var r0 error
	if rf, ok := ret.Get(0).(func(domain.Article) error); ok {
		r0 = rf(_a0)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// NewArticleRepository creates a new instance of ArticleRepository. It also registers the testing.TB interface on the mock and a cleanup function to assert the mocks expectations.
func NewArticleRepository(t testing.TB) *ArticleRepository {
	mock := &ArticleRepository{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
