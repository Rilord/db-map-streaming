// Code generated by mockery v2.12.2. DO NOT EDIT.

package mocks

import (
	domain "game-server/internal/core/domain"

	mock "github.com/stretchr/testify/mock"

	ports "game-server/internal/core/ports/repository"

	testing "testing"
)

// MapTileRepository is an autogenerated mock type for the MapTileRepository type
type MapTileRepository struct {
	mock.Mock
}

// Find provides a mock function with given fields: filter
func (_m *MapTileRepository) Find(filter ports.MapTileFilter) ([]*domain.Tile, error) {
	ret := _m.Called(filter)

	var r0 []*domain.Tile
	if rf, ok := ret.Get(0).(func(ports.MapTileFilter) []*domain.Tile); ok {
		r0 = rf(filter)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*domain.Tile)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(ports.MapTileFilter) error); ok {
		r1 = rf(filter)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Get provides a mock function with given fields: tile_id
func (_m *MapTileRepository) Get(tile_id string) (domain.Tile, error) {
	ret := _m.Called(tile_id)

	var r0 domain.Tile
	if rf, ok := ret.Get(0).(func(string) domain.Tile); ok {
		r0 = rf(tile_id)
	} else {
		r0 = ret.Get(0).(domain.Tile)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(tile_id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetRaster provides a mock function with given fields: tile_id
func (_m *MapTileRepository) GetRaster(tile_id string) (*domain.Raster, error) {
	ret := _m.Called(tile_id)

	var r0 *domain.Raster
	if rf, ok := ret.Get(0).(func(string) *domain.Raster); ok {
		r0 = rf(tile_id)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*domain.Raster)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(tile_id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetVector provides a mock function with given fields: tile_id
func (_m *MapTileRepository) GetVector(tile_id string) ([]*domain.Raster, error) {
	ret := _m.Called(tile_id)

	var r0 []*domain.Raster
	if rf, ok := ret.Get(0).(func(string) []*domain.Raster); ok {
		r0 = rf(tile_id)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*domain.Raster)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(tile_id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// NewMapTileRepository creates a new instance of MapTileRepository. It also registers the testing.TB interface on the mock and a cleanup function to assert the mocks expectations.
func NewMapTileRepository(t testing.TB) *MapTileRepository {
	mock := &MapTileRepository{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
