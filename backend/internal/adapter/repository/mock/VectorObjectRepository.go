// Code generated by mockery v2.12.2. DO NOT EDIT.

package mocks

import (
	domain "game-server/internal/core/domain"

	mock "github.com/stretchr/testify/mock"

	ports "game-server/internal/core/ports/repository"

	testing "testing"
)

// VectorObjectRepository is an autogenerated mock type for the VectorObjectRepository type
type VectorObjectRepository struct {
	mock.Mock
}

// Add provides a mock function with given fields: vector
func (_m *VectorObjectRepository) Add(vector domain.VectorObject) error {
	ret := _m.Called(vector)

	var r0 error
	if rf, ok := ret.Get(0).(func(domain.VectorObject) error); ok {
		r0 = rf(vector)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Delete provides a mock function with given fields: vector_id
func (_m *VectorObjectRepository) Delete(vector_id string) error {
	ret := _m.Called(vector_id)

	var r0 error
	if rf, ok := ret.Get(0).(func(string) error); ok {
		r0 = rf(vector_id)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Find provides a mock function with given fields: filter
func (_m *VectorObjectRepository) Find(filter ports.VectorObjectFilter) ([]*domain.VectorObject, error) {
	ret := _m.Called(filter)

	var r0 []*domain.VectorObject
	if rf, ok := ret.Get(0).(func(ports.VectorObjectFilter) []*domain.VectorObject); ok {
		r0 = rf(filter)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*domain.VectorObject)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(ports.VectorObjectFilter) error); ok {
		r1 = rf(filter)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Get provides a mock function with given fields: vector_id
func (_m *VectorObjectRepository) Get(vector_id string) (domain.VectorObject, error) {
	ret := _m.Called(vector_id)

	var r0 domain.VectorObject
	if rf, ok := ret.Get(0).(func(string) domain.VectorObject); ok {
		r0 = rf(vector_id)
	} else {
		r0 = ret.Get(0).(domain.VectorObject)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(vector_id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// NewVectorObjectRepository creates a new instance of VectorObjectRepository. It also registers the testing.TB interface on the mock and a cleanup function to assert the mocks expectations.
func NewVectorObjectRepository(t testing.TB) *VectorObjectRepository {
	mock := &VectorObjectRepository{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
